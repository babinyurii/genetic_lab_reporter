# Generated by Django 5.0.6 on 2024-12-23 06:42

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('detection_kits', '0006_alter_detectionkitmarkers_options_and_more'),
        ('markers', '0003_alter_singlenucpol_gene_name_full_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=20)),
                ('last_name', models.CharField(max_length=35)),
                ('middle_name', models.CharField(blank=True, max_length=35, null=True)),
                ('age', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(122)])),
                ('sample_clinic_id', models.CharField(blank=True, max_length=255, null=True)),
                ('lab_id', models.CharField(max_length=255, unique=True)),
                ('sample_type', models.CharField(choices=[('commerce', 'коммерческий заказ'), ('case_study', 'для  кейсов'), ('marketing', 'продвижение'), ('research', 'исследование или разработка'), ('other', 'другое (укажите в комментарии к образцу')], max_length=255)),
                ('date_sampled', models.DateField(help_text='USE CALENDAR WIDGET')),
                ('date_delivered', models.DateField(help_text='USE CALENDAR WIDGET')),
                ('dna_concentration', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('dna_quality_260_280', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(3.0)])),
                ('dna_quality_260_230', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(3.0)])),
                ('notes', models.TextField(blank=True, max_length=255, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sample',
                'verbose_name_plural': '3. Samples',
            },
        ),
        migrations.CreateModel(
            name='ResultSNP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, help_text='use only English characters for result.                            USE NUCLEOTIDE ORDER DESIGNATED ABOVE', max_length=4, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('genetic_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='detection_kits.detectionkit')),
                ('snp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='markers.singlenucpol')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='samples.sample')),
            ],
            options={
                'verbose_name': 'SNP result',
                'verbose_name_plural': '4. SNP results',
            },
        ),
        migrations.CreateModel(
            name='SampleDetectionKit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('genetic_test', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='detection_kits.detectionkit')),
                ('sample', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='samples.sample')),
            ],
            options={
                'verbose_name': 'Генетический тест',
                'verbose_name_plural': 'Генетические тесты',
            },
        ),
        migrations.AddField(
            model_name='sample',
            name='genetic_tests',
            field=models.ManyToManyField(through='samples.SampleDetectionKit', to='detection_kits.detectionkit'),
        ),
        migrations.AddConstraint(
            model_name='sampledetectionkit',
            constraint=models.UniqueConstraint(fields=('sample', 'genetic_test'), name='sample_and_genetic_test_unique_constraint'),
        ),
    ]
